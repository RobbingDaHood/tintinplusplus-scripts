# NOP {Find the top tree "X's" the rooms where it would never say anything but "dig here": Then move relative to that location based on the type of the map.}
# NOP {So tattered/cryptic/ancient maps are 14s from the top 3, im unsure what stained and simple, i think its like 9 for stained and idk how many simple is but its less than stained}
# NOP {Simple 4s}

#VARIABLE enable_mapper_state 0;
#VARIABLE mapper_state TRAVEL;
#VARIABLE mapper_last_travel_move d;
#VARIABLE mapper_count_in_a_row 0;
#VARIABLE mapper_count_stable 0;
#ALIAS {start_mapper}
{
    #VARIABLE enable_mapper_state 1;
    #VARIABLE mapper_state TRAVEL;
    prompt &Y%hhp &C%mm &G%vmv&w %o> [$mapper_state];
    #VARIABLE mapper_count_in_a_row 0;
    #VARIABLE mapper_count_stable 0;
    #VARIABLE max_north_coordinate -9999;
    #VARIABLE max_east_coordinate -9999;
    look;
    #NOP {mount pet};
    travel;
    recreate_map;
    examine map;
}

#ALIAS {prepare_mapper}
{
    cast haste; 
    cast fly; 
    cast haste pet; 
    cast fly pet;
    start_mapper;
}

#ALIAS {stop_mapper}
{
    #VARIABLE enable_mapper_state 0;
    #LIST last_coordinate_when_stable clear;
    prompt &Y%hhp &C%mm &G%vmv&w %o>;
}

#ACTION {The map indicates a location further {.*?}.}
{
    #IF {$enable_mapper_state}
    {
        #IF {"$mapper_state" == "FOLLOW_THE_EDGE"}
        {
            s;
            #VARIABLE mapper_state DONE_WITH_MAPPINGS;
            prompt &Y%hhp &C%mm &G%vmv&w %o> [$mapper_state];
            #SHOWME {DONE!!! YEAH};
        };
        #ELSE
        {
            flush;
            #SHOWME {Testing if I should go to explore mode: "$mapper_state" == "TRAVEL" && $visited_mapper_rooms[$current_coordinates]};
            #IF {"$mapper_state" == "TRAVEL" && $visited_mapper_rooms[$current_coordinates]}
            {
                change_to_explorer_mode;
            };
            #VARIABLE mapper_last_travel_move %1;
            #MAP move $long_to_short_exit_name[%1];
            %1;
        };
        #VARIABLE visited_mapper_rooms[$current_coordinates] 1;
    };
    #MAP MAP;
}

#ACTION {You see nothing special.}
{
    #NOP {happens on top of lava pools and for some reason gives you no direction};
    #IF {$enable_mapper_state}
    {
        flush;
        $mapper_last_travel_move;
    }
}

#ACTION {You travel}
{
    after_travel_actions;
}

#ACTION {You explore}
{
    after_travel_actions;
}

#ACTION {You walk}
{
    after_travel_actions;
}

#ALIAS {after_travel_actions}
{
    #IF {$enable_mapper_state}
    {
        flush;
        look;
        examine map;
    };
}

#ALIAS {change_to_explorer_mode}
{
    flush;
    explore;
    #LIST last_coordinate_when_stable clear;
    #LIST visited_mapper_rooms clear;
    #VARIABLE mapper_count_in_a_row 0;
    #VARIABLE mapper_state FIND_MAPPING_AREA;
    prompt &Y%hhp &C%mm &G%vmv&w %o> [$mapper_state];
    recreate_map;
    look;
    examine map;
}

#ACTION {somewhere near here! start digging!}
{
    #IF {$enable_mapper_state}
    {
        #VARIABLE visited_mapper_rooms[$current_coordinates] 1;
        #IF {"$mapper_state" == "TRAVEL"}
        {
            change_to_explorer_mode;
        };
        #ELSE 
        {
            #IF {$mapper_count_in_a_row < 18}
            {
                #MATH mapper_count_in_a_row {$mapper_count_in_a_row + 1};
                flush;
                examine map;
            };
            #ELSE 
            {
                #SHOWME {IT IS STABLE! RESET THE COUNT! MAPTYPE: $map_type};
                #VARIABLE last_coordinate_when_stable[$current_coordinates] 1;
                #VARIABLE mapper_count_in_a_row 0;
                #IF {"$mapper_state" == "FIND_MAPPING_AREA"}
                {
                    #IF {"childish" == "$map_type"}
                    {
                        stop_and_start_digging;
                    };
                    #ELSE
                    {
                        look;
                        #DELAY {move_closer_to_north_east_edge_delay} {move_closer_to_north_east_edge} {0.5};
                    };
                };
                #ELSEIF {"$mapper_state" == "FOLLOW_THE_EDGE"}
                {
                    nw;
                    #DELAY {examine_map_delay} {examine map} {0.5};
                };
            };
        };
    };
}

#ALIAS {move_closer_to_north_east_edge}
{
    #IF {$max_north_coordinate < $north_coordinate}
    {
        #SHOWME {STABLE NORTH};
        #VARIABLE max_north_coordinate $north_coordinate;
        n;
    };
    #ELSEIF {$max_east_coordinate < $east_coordinate}
    {
        #SHOWME {STABLE EAST};
        #VARIABLE max_east_coordinate $east_coordinate;
        e;
    };
    #ELSE 
    {
        #SHOWME {STABLE FOLLOW_THE_EDGE};
        #VARIABLE mapper_state FOLLOW_THE_EDGE;
        prompt &Y%hhp &C%mm &G%vmv&w %o> [$mapper_state];
        nw;
    };
    #DELAY {examine_map_delay} {examine map} {0.5};
}

#ALIAS {stop_and_start_digging}
{
    stop_mapper;
    flush;
    dismount;
    dig;
}

#VARIABLE dig_count 0;
#ACTION {Your dig uncovered nothing.}
{
    #IF {dig_count < 18}
    {
        #MATH dig_count {$dig_count + 1};
        dig;
    };
    #ELSE
    {
        look;
        dig;
    }
}

#ACTION {{[0-9]*?} miles {.*?} and {[0-9]*?} miles {.*?} }
{
    #VARIABLE current_coordinates %1:%2:%3:%4;
    #VARIABLE east_coordinate %1;
    #IF {"east" == %2}
    {
        #MATH east_coordinate {$east_coordinate * -1};
    };
    #VARIABLE north_coordinate %3;
    #IF {"south" == %4}
    {
        #MATH north_coordinate {$north_coordinate * -1};
    };
}

#ACTION {A {.*?} treasure map}
{
    #VARIABLE map_type %1;
}

#ACTION {You uncover a}
{
    flush;
    open chest;
    fill treasures chest;
    get all chest;
}

#ACTION {Alas, passage is blocked.}
{
    #IF {$enable_mapper_state}
    {
        #map roomflag block;
        #map move $long_to_short_exit_name[$direction_long_opposites[$mapper_last_travel_move]];
        move_to_closest_unexplored_room;
    };
}

#VARIABLE {direction_to_get_out_of_stuck} 
{
    {east}{ne}
    {northeast}{n}
    {north}{nw}
    {northwest}{w}
    {west}{sw}
    {southwest}{s}
    {south}{se}
    {southeast}{e}
}
