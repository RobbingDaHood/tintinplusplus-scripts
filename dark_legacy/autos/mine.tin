#VARIABLE digging_path_enabled 0;
#ALIAS {dig_path {.*?} {.*}}
{
    clear_direction_with_blocker;
    clear_direction_with_faultline;
    look;
    #VARIABLE digging_path_enabled 1;
    create_path %1 %2;
    #SHOWME {DIGGING PATH: $created_path[]};
    start_maintain_all_xorns;
    buff_self;
    prompt &Y%hhp &C%mm &G%vmv&w %o> MINING;
    fprompt &Y%hhp &C%mm &G%vmv&w %o> FIGHTING_DURING_MINING;
}

#ALIAS {stop_dig_path}
{
    #VARIABLE digging_path_enabled 0;
    put_all_in_mining_portal;
    mining_ungag;
    prompt &Y%hhp &C%mm &G%vmv&w %o>;
}

#VARIABLE dig_trigger_kill_once 0;
#ACTION {|{.*?}FIGHTING_DURING_MINING}
{
    #IF {!$dig_trigger_kill_once}
    {
        kill ~;
        #VARIABLE dig_trigger_kill_once 1;
    };
}

#ACTION {|{.*?}MINING}
{
    #IF {$dig_trigger_kill_once}
    {
        #VARIABLE dig_trigger_kill_once 0;
        trigger_next_mine;
    };
}

#ALIAS {put_all_in_mining_portal}
{
    put all.uncut uncutportal;
    put all.ore miningportal;
    put all.coal miningportal;
    put all.bone miningportal;
    put all.nugget miningportal;
}

#ACTION {Meeting impenetrable rock, you fail to expand the mine in that direction.}
{
    stop_dig_path;
}

#ACTION {Water flows beyond. Better not.}
{
    stop_dig_path;
}

#ACTION {You are killed by a}
{
    stop_dig_path;
};

#ALIAS {create_path {.*?} {.*}}
{
    #VARIABLE {path_direction} {%1};
    #VARIABLE {path_duration} {%2};

    #list {created_path} clear; 
    #loop 0 $path_duration count 
    {
        #PARSE {$path_direction} {direction} 
        {
            #list created_path add $direction;
        };
    };
};

#ALIAS {trigger_next_mine}
{
    #IF {$digging_path_enabled}
    {
        #IF {&created_path[] != 0}
        {
            #IF {"$created_path[+1]" == "g"}
            {
                #DELAY {build_and_use_heavy_girders_delay} build_and_use_heavy_girders {2}
            };
            #ELSEIF {$direction_with_faultline[$created_path[+1]]}
            {
                #VARIABLE created_path[0] g; #NOP {This is a hack, the generated path starts from 1, so this will always go ahead};
                #DELAY {build_and_use_heavy_girders_delay} build_and_use_heavy_girders {2}
            };
            #ELSE 
            {
                #SEND {mine $created_path[+1]};
            };
        };
        #ELSE 
        {
            #SHOWME {STOPPED DIGGING PATH: PATH IS EMPTY};
            stop_dig_path;
        };
    };
}

#VARIABLE {mining_directions_looking} 
{
    {east}{e}
    {ne}{ne}
    {north}{n}
    {nw}{nw}
    {west}{w}
    {sw}{sw}
    {south}{s}
    {se}{se}
}

#ALIAS {clear_direction_with_faultline}
{
    #SHOWME {cleared clear_direction_with_faultline};
    #VARIABLE {direction_with_faultline} 
    {
        {e}{0}
        {ne}{0}
        {n}{0}
        {nw}{0}
        {w}{0}
        {sw}{0}
        {s}{0}
        {se}{0}
    };
}
clear_direction_with_faultline;

#ACTION {Unstable faultline {.*?}.}
{
    #VARIABLE translated_mining_room_direction $mining_directions_looking[%1];
    #VARIABLE direction_with_faultline[$translated_mining_room_direction] 1;
}

#ALIAS {clear_direction_with_blocker}
{
    #SHOWME {cleared clear_direction_with_blocker};
    #VARIABLE {direction_with_blocker} 
    {
        {e}{0}
        {ne}{0}
        {n}{0}
        {nw}{0}
        {w}{0}
        {sw}{0}
        {s}{0}
        {se}{0}
    };
}
clear_direction_with_blocker;

#ACTION {Endless abyss {.*?}.}
{
    #VARIABLE translated_mining_room_direction $mining_directions_looking[%1];
    #VARIABLE direction_with_blocker[$translated_mining_room_direction] 1;
}

#ACTION {Darkness {.*?}.}
{
    #VARIABLE translated_mining_room_direction $mining_directions_looking[%1];
    #VARIABLE direction_with_blocker[$translated_mining_room_direction] 1;
}

#ACTION {Voidstone {.*?}.}
{
    #VARIABLE translated_mining_room_direction $mining_directions_looking[%1];
    #VARIABLE direction_with_blocker[$translated_mining_room_direction] 1;
}

#ACTION {Flowing magma {.*?}.}
{
    #VARIABLE translated_mining_room_direction $mining_directions_looking[%1];
    #VARIABLE direction_with_blocker[$translated_mining_room_direction] 1;
}

#ALIAS {build_and_use_heavy_girders}
{
    #DELAY {craft_girder_delay} 
    {
	put_all_in_mining_portal;
    	craft Architecture 'Heavy Mining Girder' 1 ironwood
    } {0.5};
    #DELAY {craft_girder_use_girder_delay} 
    {
    	use girder; 
        clear_direction_with_faultline;
    } {2.5};
};

#ACTION {Nothing left to harvest there.}
{
    #DELAY {dig_move_and_mine_trigger} {dig_move_and_mine} {0.2};
}

#ACTION {A passage opens up to}
{
    #DELAY {dig_move_and_mine_trigger} {dig_move_and_mine} {0.2};
}

#ACTION {Part of the ceiling collapses, revealing a passage.}
{
    #DELAY {dig_move_and_mine_trigger} {dig_move_and_mine} {0.2};
}

#ACTION {Part of the ceiling collapses, revealing a passage.}
{
    #DELAY {dig_move_and_mine_trigger} {dig_move_and_mine} {0.2};
}

#ACTION {You explore}
{
    #NOP {If we moved then all blockers are cleared};
    clear_direction_with_blocker;
    clear_direction_with_faultline;
}

#ALIAS {dig_move_and_mine}
{
    #IF {$digging_path_enabled}
    {
        stuff_to_do_before_move;
    };
}

#ALIAS {stuff_to_do_before_move}
{
    #IF {$digging_path_enabled}
    {
        fill randomloot corpse; 
        sacrifice corpse;
        fill garbage;
    };
}

#ACTION {A coin appears in your pouch}
{
    #IF {$digging_path_enabled}
    {
        fill randomloot corpse; 
        sacrifice corpse;
    };
}

#ACTION {You can't find it.}
{
    #NOP {triggers after sacrificing a corpse that cannot be found};
    #IF {$digging_path_enabled}
    {
        $created_path[+1];
        #list created_path delete 1;
        #SHOWME {DIGGING PATH: $created_path[]};
        #DELAY {trigger_next_mine_after_move_delay} {trigger_next_mine} {1};
    };
}

#ACTION {You reinforce the mine with}
{
    #IF {$digging_path_enabled}
    {
        #list created_path delete 1;
        #SHOWME {AFTER REINFORCEMENT DIGGING PATH: $created_path[]};
    	clear_direction_with_faultline;
        trigger_next_mine;
    };
};

#ACTION {This mine is already reinforced!}
{
    #IF {$digging_path_enabled}
    {
        #list created_path delete 1;
        #SHOWME {AFTER REINFORCEMENT WERE NOT NEEDED DIGGING PATH: $created_path[]};
    	clear_direction_with_faultline;
        trigger_next_mine;
    };
};

#ACTION {Nothing like that here.}
{
    #IF {$digging_path_enabled}
    {
        stop_dig_path;
    };
};

#ACTION {You lack the tools to harvest anything there!}
{
    draw pick;
    trigger_next_mine;
}

#ACTION {Granite stands here.}
{
    fill garbage granite;
}

#ACTION {does not fit into an extradimensional portal}
{
    move_portal_and_create_a_new_one;
}
