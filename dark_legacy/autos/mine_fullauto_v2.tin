#variable {state_automine_enabled} {0};
#ALIAS {start_automine}
{
    #variable {state_automine_enabled} {1};
    recreate_map;
    start_maintain_all_xorns;
    clear_direction_with_score;
    look;

    #DELAY {stop_automine_delay} 
    {
        #SHOWME {Did automatic run for 28 minutes, so pausing.}; 
        stop_automine;
    }{1680};

    start_ticker_examine_miningportal;
}

#ALIAS {stop_automine}
{
    #variable {state_automine_enabled} {0};
    stop_ticker_examine_miningportal;
}

#ALIAS {recreate_map}
{
    #map destroy world;
    #map create 999999;
    #map goto 1;
}

#EVENT {MAP CREATE ROOM}
{
    #map set {roomdesc} {mineable} {%0};
}

#VARIABLE last_room_visited -1;
#VARIABLE counts_between_scrys 0;
#ACTION {Exits: {.*}}
{
    #IF {$state_automine_enabled}
    {
        #map get roomvnum current_room_vnum;
        #SHOWME {Is new room? $last_room_visited != $current_room_vnum};
        #IF {$last_room_visited != $current_room_vnum}
        {
            #SHOWME {direction_with_blocker $direction_with_blocker};
            #SHOWME {direction_with_score $direction_with_score};
            #VARIABLE last_room_visited $current_room_vnum;

            #IF {$counts_between_scrys > 3}
            {
		examine sextant;
                cast scry;
                #VARIABLE counts_between_scrys 0;
            };
            #ELSE 
            {
                #MATH counts_between_scrys {$counts_between_scrys + 1};
            };
            
            #NOP {Create all neighboring rooms: maybe just move between them all};
            #MAP move 1e2w1e;
            #MAP move 1n2s1n;
            #MAP move 1n1w2s2e2n1w1s;

            #NOP {Create all neighboring rooms: maybe just move between them all};
            #map exit {n} weight $direction_with_score[n];
            #IF {$direction_with_blocker[n]}
            {
                #map exitflag {n} BLOCK ON;
            };
            #map exit {s} weight $direction_with_score[s];
            #IF {$direction_with_blocker[s]}
            {
                #map exitflag {s} BLOCK ON;
            };
            #map exit {e} weight $direction_with_score[e];
            #IF {$direction_with_blocker[e]}
            {
                #map exitflag {e} BLOCK ON;
            };
            #map exit {w} weight $direction_with_score[w];
            #IF {$direction_with_blocker[w]}
            {
                #map exitflag {w} BLOCK ON;
            };

            #MAP move n;
            #map exit {e} weight $direction_with_score[ne];
            #map exit {w} weight $direction_with_score[nw];
            #MAP move 1e1s;
            #map exit {n} weight $direction_with_score[ne];
            #map exit {s} weight $direction_with_score[se];
            #MAP move 1s1w;
            #map exit {e} weight $direction_with_score[se];
            #map exit {w} weight $direction_with_score[sw];
            #MAP move 1w1n;
            #map exit {n} weight $direction_with_score[nw];
            #map exit {s} weight $direction_with_score[sw];
            #MAP move e;

            #VARIABLE {directions_in_room} {%1};
            #LIST {directions_in_room} explode { };
            #FOREACH {$directions_in_room[]} {direction_in_room}
            {
                #VARIABLE short_room_direction {$long_to_short_exit_name[$direction_in_room]};

                #IF {"$short_room_direction" != "d" && "$short_room_direction" != "u"}
                {
                    #NOP {This move is fine, because it will always lead to non-mined room};
                    #map move {$short_room_direction};
                    #map get {roomdesc} {neighbour_room_desc};
                    #IF {"$neighbour_room_desc" == "mineable"}
                    {
                        #MAP set {roomdesc} {mined_unexplored};
                    };
                    #MAP goto $current_room_vnum;
                    #map exit {$short_room_direction} weight {$direction_with_score[$short_room_direction]};
                    #map exitflag {$short_room_direction} BLOCK OFF;
                };
            };

            #map set {roomdesc} {explored};
            move_to_closest_mineable_room;
        };
    };
    clear_direction_with_blocker;
    clear_direction_with_score;
}

#ALIAS {move_to_closest_mineable_room}
{
    #IF {$state_automine_enabled}
    {
        #map find {roomdesc} {mineable};
        #path get length length_of_path;
        #if {$length_of_path == 1} 
        {
            #path save forward mineable_path;
            #list mineable_list create $mineable_path;
            #SHOWME {Digging: $mineable_list[1]};
            dig_path $mineable_list[1] 0;
        };
        #elseif {$length_of_path > 1} 
        {
            #path walk;
        };
        #else 
        {
            move_to_closest_mined_unexplored_room;
        };
    };
}

#ALIAS {move_to_closest_mined_unexplored_room}
{
    #IF {$state_automine_enabled}
    {
        #map find {roomdesc} {mined_unexplored};
        #path get length length_of_path;
        #if {$length_of_path > 0} 
        {
            #path walk;
        };
        #else 
        {
            #SHOWME {DONE WALKING!};
            stop_autoexplore;
        };
    };
}

#VARIABLE {long_to_short_exit_name} 
{
    {east}{e}
    {northeast}{ne}
    {north}{n}
    {northwest}{nw}
    {west}{w}
    {southwest}{sw}
    {south}{s}
    {southeast}{se}
    {e}{e}
    {ne}{ne}
    {n}{n}
    {nw}{nw}
    {w}{w}
    {sw}{sw}
    {s}{s}
    {se}{se}
    {d}{d}
    {u}{u}
    {down}{d}
    {up}{u}
}

#ALIAS {clear_direction_with_score}
{
    #VARIABLE {direction_with_score} 
    {
        {e}{300}
        {ne}{300}
        {n}{300}
        {nw}{300}
        {w}{300}
        {sw}{300}
        {s}{300}
        {se}{300}
    };
}

#ACTION {Draconite ore {.*?}.}
{
    #VARIABLE translated_mining_room_direction $mining_directions_looking[%1];
    #VARIABLE direction_with_score[$translated_mining_room_direction] 1;
}

#ACTION {Feyglint {.*?}.}
{
    #NOP {Example: Yellow feyglint se.};
    #NOP {There is no change on the text based on it being ore or not. So I give it a lower score because there is a high risk of nothing.};
    #VARIABLE translated_mining_room_direction $mining_directions_looking[%1];
    #IF {$direction_with_score[$translated_mining_room_direction] > 20}
    {           
        #VARIABLE direction_with_score[$translated_mining_room_direction] 20;
    };
}

#ACTION {Coal ore {.*?}.}
{
    #NOP {coal ore is a bottleneck with refining ores};
    #VARIABLE translated_mining_room_direction $mining_directions_looking[%1];
    #IF {$direction_with_score[$translated_mining_room_direction] > 2}
    {           
        #VARIABLE direction_with_score[$translated_mining_room_direction] 2;
    };
}

#ACTION {Tear of the gods {.*?}.}
{
    #NOP {Meteorite ore};
    #VARIABLE translated_mining_room_direction $mining_directions_looking[%1];
    #VARIABLE direction_with_score[$translated_mining_room_direction] 1;
}

#ACTION {Mitrill ore {.*?}.}
{
    #VARIABLE translated_mining_room_direction $mining_directions_looking[%1];
    #VARIABLE direction_with_score[$translated_mining_room_direction] 1;
}

#ACTION {Veined rockwalls {.*?}.}
{
    #NOP {silver};
    #VARIABLE translated_mining_room_direction $mining_directions_looking[%1];
    #IF {$direction_with_score[$translated_mining_room_direction] > 2}
    {           
        #VARIABLE direction_with_score[$translated_mining_room_direction] 2;
    };
}

#ACTION {Blue diamond {.*?}.}
{
    #VARIABLE translated_mining_room_direction $mining_directions_looking[%1];
    #VARIABLE direction_with_score[$translated_mining_room_direction] 1;
}

#ACTION {Huge crystals {.*?}.}
{
    #NOP {Could be high level gems};
    #VARIABLE translated_mining_room_direction $mining_directions_looking[%1];
    #VARIABLE direction_with_score[$translated_mining_room_direction] 1;
}

#ACTION {Crystal lattice {.*?}.}
{
    #NOP {Could be high level gems};
    #VARIABLE translated_mining_room_direction $mining_directions_looking[%1];
    #VARIABLE direction_with_score[$translated_mining_room_direction] 1;
}

#ACTION {Moonstone {.*?}.}
{
    #VARIABLE mining_direction %1;
    #VARIABLE translated_mining_room_direction $mining_directions_looking[%1];
    #VARIABLE direction_with_score[$translated_mining_room_direction] 1;
}

#ACTION {Bloodstone {.*?}.}
{
    #VARIABLE mining_direction %1;
    #VARIABLE translated_mining_room_direction $mining_directions_looking[%1];
    #VARIABLE direction_with_score[$translated_mining_room_direction] 1;
}

#ACTION {Everything fades to black, You feel yourself leaving your body.}
{
    stop_automine;
}
