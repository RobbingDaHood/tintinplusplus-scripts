#variable bottom_bar_height {7};
#variable right_column_start_line {-40};
#math right_bar_left_start_column {$right_column_start_line + 2};
#variable right_bar_padding_configuration {%};
#cat right_bar_padding_configuration {$right_bar_left_start_column};
#cat right_bar_padding_configuration {s};

#ALIAS {reload_configs}
{
    #kill; 
    #read ls_v2.tin;
}

#variable {state_room_desription_detailed} {1}; 
#action {Your Detailed Rooms depiction is now off.}
{
    #variable {state_room_desription_detailed} {0}; 
};
#action {Your Detailed Rooms depiction is now on.}
{
    #variable {state_room_desription_detailed} {1}; 
    listen_roomname_and_directions;
    look;
};

#variable compass_directions {n;ne;e;se;s;sw;w;nw};

#alias {setup_all_paths}
{
    #variable y_axis_dirs {north; none};
    #variable x_axis_dirs {west; east; none};
    #variable z_axis_dirs {up; in; down; out; none};

    #variable direction_opposites
    {
        {up}{down}
        {down}{up}
        {west}{east}
        {east}{west}
        {north}{south}
        {south}{north}
        {in}{out}
        {out}{in}
        {none}{none}
    };

    #variable {translate_dir_to_short}
    {
        {in}{i}
        {out}{o}
        {up}{u}
        {down}{d}
        {north}{n}
        {south}{s}
        {west}{w}
        {east}{e}
        {none}{none}
    };
    
    #variable {map_direction_names_to_short} {};
    #variable {map_long_direction_names_to_short} {};
    #variable direction_short_opposites {};
    
    #foreach {$z_axis_dirs} {z_direction}
    {
        #foreach {$x_axis_dirs} {x_direction}
        {
            #foreach {$y_axis_dirs} {y_direction}
            {
                #variable normal_dir {$y_direction};
                #cat normal_dir {$x_direction};
                #cat normal_dir {$z_direction};
                #replace normal_dir {none} {};

                    #if {"$normal_dir" != ""}
                    {

                        #variable y_direction_short {$translate_dir_to_short[$y_direction]};
                        #variable x_direction_short {$translate_dir_to_short[$x_direction]};
                        #variable z_direction_short {$translate_dir_to_short[$z_direction]};

                        #variable normal_dir_short {$y_direction_short};
                        #cat normal_dir_short {$x_direction_short};
                        #cat normal_dir_short {$z_direction_short};
                        #replace normal_dir_short {none} {};
                        
                        #variable normal_dir_long {$y_direction};
                        #cat normal_dir_long {$x_direction};
                        #if {"$y_direction" != "none" || "$x_direction" != "none"}
                        {
                            #cat normal_dir_long {ward};
                            #if {"$z_direction" != "none"} 
                            {
                                #cat normal_dir_long { and };
                            };
                        };
                        #if {"$z_direction" != "none"} 
                        {
                            #cat normal_dir_long {$z_direction};
                            #cat normal_dir_long {ward};
                        };
                        #replace normal_dir_long {none} {};



                        #variable y_direction_opposite {$direction_opposites[$y_direction]};
                        #variable x_direction_opposite {$direction_opposites[$x_direction]};
                        #variable z_direction_opposite {$direction_opposites[$z_direction]};

                        #variable normal_dir_opposite {$y_direction_opposite};
                        #cat normal_dir_opposite {$x_direction_opposite};
                        #cat normal_dir_opposite {$z_direction_opposite};
                        #replace normal_dir_opposite {none} {};

                        #variable y_direction_short_opposite {$translate_dir_to_short[$y_direction_opposite]};
                        #variable x_direction_short_opposite {$translate_dir_to_short[$x_direction_opposite]};
                        #variable z_direction_short_opposite {$translate_dir_to_short[$z_direction_opposite]};

                        #variable normal_dir_short_opposite {$y_direction_short_opposite};
                        #cat normal_dir_short_opposite {$x_direction_short_opposite};
                        #cat normal_dir_short_opposite {$z_direction_short_opposite};
                        #replace normal_dir_short_opposite {none} {};
                        
                        #variable normal_dir_long_opposite {$y_direction_opposite};
                        #cat normal_dir_long_opposite {$x_direction_opposite};
                        #if {"$y_direction_opposite" != "none" || "$x_direction_opposite" != "none"}
                        {
                            #cat normal_dir_long_opposite {ward};
                            #if {"$z_direction_opposite" != "none"} 
                            {
                                #cat normal_dir_long_opposite { and };
                            };
                        };
                        #if {"$z_direction_opposite" != "none"} 
                        {
                            #cat normal_dir_long_opposite {$z_direction_opposite};
                            #cat normal_dir_long_opposite {ward};
                        };
                        #replace normal_dir_long_opposite {none} {};

                        

                        #variable {map_direction_names_to_short[$normal_dir]} {$normal_dir_short};
                        #variable {map_long_direction_names_to_short[$normal_dir_long]} {$normal_dir_short};

                        #variable {map_direction_names_to_short[$normal_dir_opposite]} {$normal_dir_short_opposite};
                        #variable {map_long_direction_names_to_short[$normal_dir_long_opposite]} {$normal_dir_short_opposite};

                        #variable {direction_opposites[$normal_dir]} {$normal_dir_opposite};
                        #variable {direction_opposites[$normal_dir_opposite]} {$normal_dir};
                        #variable {direction_short_opposites[$normal_dir_short]} {$normal_dir_short_opposite};
                        #variable {direction_short_opposites[$normal_dir_short_opposite]} {$normal_dir_short};
                        #variable {direction_opposites_long[$normal_dir_long]} {$normal_dir_long_opposite};
                        #variable {direction_opposites_long[$normal_dir_long_opposite]} {$normal_dir_long};
                        
                        
                    };
            }
        }
    }
}

#action {You {walk|run|climb|flop|slither|flow|fly|gallop|canter|hop|roll|flee|fall} {.*?( and .*?)?}{ |\.}} {
    listen_roomname_and_directions;
    #if {&map_long_direction_names_to_short[%2] != 0}
    {
        #variable {short_direction_name} {$map_long_direction_names_to_short[%2]};
        add_move_to_neo4j $short_direction_name;
        #if {$state_room_desription_detailed}
        {
            determine location;
            trigger_show_attacks;
            listen_vitals;
            listen_hunger_thirst_intoxication;
        };
    };
    #else
    {
        #showme {ERROR: cannot map the %2 long direction! Mapper will not update!};
    }
}

#gag {You peer at your surroundings and your oaken compass.};
#gag {You determine that you are {(at|in|around).*?}.};
#action {You determine that you are {(at|in|around).*?}.}
{
    #variable full_string_of_determined_location {%0};
    #variable current_area_name {No current area name};
    #regex {%0} {you are {.*?}in {.*?}{\.|,}}
    {
        #variable current_area_name {&2};
        add_areaname_to_neo4j &2;
    };
    #regex {%0} {you are at the coordinates {.*?} in}
    {
        #cat current_area_name {(L: &1)};
        add_local_coordinate_to_neo4j &1;
    };
    #regex {%0} {you are {.*?}at global coordinates {.*?}.}
    {
        #cat current_area_name {(G: &2)};
        add_global_coordinate_to_neo4j &2;
    };
    
    #format {current_area_name_formatted} {$right_bar_padding_configuration} {$current_area_name};
    #math line_to_print {-$bottom_bar_height};
    #showme {$current_area_name_formatted} {$line_to_print} {2};
};

#alias {listen_to_room_description}
{
    #if {$state_room_desription_detailed}
    {
        #action {{.+}}
        {
            #variable {roomdesc} {%%1};
            add_roomdesc_to_neo4j %%1;
            #unaction {{.+}};
        };
    };
};

#alias {listen_vitals}
{
    #gag {[ Head:{\s+\d+(\.\d+)?\s+}Chest:{.*}};
    #action {[ Head: {\d+(\.\d+)?}  Chest:{.*}}
    {
        #variable fetched_vitals {%%0};
        #replace {fetched_vitals} {{\s+}} { };
        #replace {fetched_vitals} {[ } {};
        #replace {fetched_vitals} { ]} {};
        #replace {fetched_vitals} { } {:};
        #replace {fetched_vitals} {{:+}} {:};
        #math line_to_print {-$bottom_bar_height + 1};
        #format {fetched_vitals} {%-180s} {$fetched_vitals};
        #showme {$fetched_vitals} {$line_to_print} {2};
        #unaction {[ Head:{\s+\d+(\.\d+)?\s+}Chest:{.*}};
        #delay {0.1} {#ungag {[ Head:{\s+\d+(\.\d+)?\s+}Chest:{.*}};};
    };
    show vitals;
};

#alias {listen_hunger_thirst_intoxication}
{
    #gag {^You are {.*?}.};
    #list all_body_stats clear;
    #action {You are {.*?}.}
    {
        #list all_body_stats add {%%1};
        #list all_body_stats size all_body_stats_size;
        #if {$all_body_stats_size > 2}
        {
            #math line_to_print {-$bottom_bar_height + 2};
            #format {all_body_stats} {%-120s} {$all_body_stats};
            #showme {$all_body_stats[]} {$line_to_print} {2};
            #delay {0.1} {#ungag {^You are {.*?}.};};
            #unaction {You are {.*?}.};
        };
    };
    show thirst, hunger, intoxication;
};

#alias {listen_roomname_and_directions}
{
    #action {{^([',.A-Za-z-][ ',.A-Za-z-]*) \[([^]]+)\]$}}
    {
        #unaction {{.*?} [{.*?}]$};
        listen_to_room_description;
    
        #variable obvious_exits %%3;
        #replace {obvious_exits} {,} {};
        #list obvious_exits explode { };
        #list obvious_exits numerate;
        
        #variable {directional_map_features} {};
    
        #variable formatted_listed_room_exits {'};
        #foreach {$obvious_exits[]} {direction}
        {
            #regex {$direction} {compass}
            {
                check_for_custom_compass_directions $direction;
            }
            {
                #regex {$direction} {{road|trail|street}:}
                {
                    check_for_map_direction_features $direction;
                }
                {
                    add_unexplored_room $direction;
                    #cat formatted_listed_room_exits {$direction','}
                };
            };
        };
    
        #regex {$formatted_listed_room_exits} {{.*?},'$} {#variable formatted_listed_room_exits &1};
        #replace {formatted_listed_room_exits} {'} {¤};
        confirm_unconfirmed_exits $formatted_listed_room_exits;
        mark_exits_temporary $formatted_listed_room_exits;
    
        add_roomname_to_neo4j %%2;

        #foreach {*directional_map_features[%*]} {map_feature_direction}
        {
            #variable map_feature_for_direction $directional_map_features[$map_feature_direction];
            add_map_directional_feature_query $map_feature_direction $map_feature_for_direction;
        };

        send_query;
    };
};

#alias {check_for_map_direction_features {.*}}
{
    #regex {%1} {{road|trail|street}:{.*}}
    {
        #variable {all_map_feature_directions} {&2};
        #list all_map_feature_directions explode {/};
        #foreach {$all_map_feature_directions[]} {map_feature_direction}
        {
            #variable {directional_map_features[$map_feature_direction]} {&1};
        };
    };
};

#alias {check_for_custom_compass_directions {.*}}
{
    #regex {%1} {^compass:{.*}$}
    {
        #variable {all_custom_compass_directions} {&1};
        #list all_custom_compass_directions explode {/};
        
        #foreach {$all_custom_compass_directions[]} {compass_direction_custom}
        {
            #foreach {$compass_directions} {compass_direction}
            {
                #variable custom_direction {$compass_direction};
                #if {&map_direction_names_to_short[$compass_direction_custom] != 0}
                {
                    #variable compass_direction_short {$map_direction_names_to_short[$compass_direction_custom]};
                    #cat custom_direction {$compass_direction_short};
                };
                #else
                {
                    #cat custom_direction {$compass_direction_custom};
                }
                add_unexplored_room $custom_direction;
                #cat formatted_listed_room_exits {$custom_direction','}
            };
        };
    } 
    {
        #foreach {$compass_directions} {compass_direction}
        {
            add_unexplored_room $compass_direction;
            #cat formatted_listed_room_exits {$compass_direction','}
        };
    }
};

#alias {add_unexplored_room {.*}}
{
    #if {&direction_short_opposites[%1] != 0}
    {
        #variable {direction_name_short_opposite} {$direction_short_opposites[%1]};
        add_unexplored_room_to_neo4j %1 $direction_name_short_opposite;
    };
    #else
    {
        add_unknown_exit_type %1;
    }
};

#alias {setup_logs} 
{
    #format {todays_logfile_name} {%t} {%Y-%m-%d-logfile.log};
    #log timestamp {%Y-%m-%d-%H:%M:%S};
    #log append {logs/$todays_logfile_name};
};

#alias {add_move_to_neo4j {.*}}
{
    #variable input {%1};
    #replace {input} {'} {};
    #list {statments_for_neo4j} {add} 
    {
        MATCH (a:Player)-[r:located_at]->(b:Room)-[r2:direction {name: '$input'}]->(c:Room) 
        SET c.updated_time = dateTime() 
        CREATE (a)-[:located_at {updated_time: dateTime()}]->(c)
        DELETE r
    };
};

#alias {add_areaname_to_neo4j {.*}}
{
    #variable input {%1};
    #replace {input} {'} {};
    #list {statments_for_neo4j} {add} 
    {
        MATCH (a:Player)-[r:located_at]->(b:Room) 
        SET b.areaname = '$input', b.updated_time = dateTime() 
    }
};

#alias {add_local_coordinate_to_neo4j {.*}}
{
    #variable input {%1};
    #replace {input} {'} {};
    #list {statments_for_neo4j} {add} 
    {
        MATCH (a:Player)-[r:located_at]->(b:Room) 
        SET b.local_coordinate = '$input', b.updated_time = dateTime() 
    }
};

#alias {add_global_coordinate_to_neo4j {.*}}
{
    #variable input {%1};
    #replace {input} {'} {};
    #list {statments_for_neo4j} {add} 
    {
        MATCH (a:Player)-[r:located_at]->(b:Room) 
        SET b.global_coordinate = '$input', b.updated_time = dateTime() 
    }
};

#alias {add_roomdesc_to_neo4j {.*}}
{
    #variable input {%1};
    #replace {input} {'} {};
    #replace {input} {\\;} {};
    #list {statments_for_neo4j} {add} 
    {
        MATCH (a:Player)-[r:located_at]->(b:Room) 
        WHERE NOT (b)-[:roomdescription {desc:'$input'}]->(b)
        CREATE (b)-[:roomdescription {desc:'$input', updated_time: dateTime()}]->(b) 
        REMOVE b.explored
    }
};

#alias {add_roomname_to_neo4j {.*}}
{
    #variable input {%1};
    #replace {input} {'} {};
    #replace {input} {\\;} {};
    #list {statments_for_neo4j} {add} 
    {
        MATCH (a:Player)-[r:located_at]->(b:Room) 
        WHERE NOT (b)-[:roomname {desc:'$input'}]->(b)
        CREATE (b)-[:roomname {desc:'$input', updated_time: dateTime()}]->(b) 
    }
};

#alias {add_unexplored_room_to_neo4j {.*?} {.*}}
{
    #variable input {%1};
    #replace {input} {'} {};
    #variable input2 {%2};
    #replace {input2} {'} {};
    #list {statments_for_neo4j} {add} 
    {
        MATCH (a:Player)-[r:located_at]->(b:Room) 
        WHERE NOT (b)-[:direction {name: '$input'}]->()
        CREATE (b)-[:direction {name:'$input', updated_time: dateTime()}]->(c:Room {explored: false, updated_time: dateTime()})-[:direction {name:'$input2', unconfirmed: 'true', updated_time: dateTime()}]->(b)
    }
};

#alias {add_unknown_exit_type {.*}}
{
    #variable input {%1};
    #replace {input} {'} {};
    #list {statments_for_neo4j} {add} 
    {
        MATCH (a:Player)-[r:located_at]->(b:Room) 
        WHERE NOT (b)-[:direction_unknown {name: '$input'}]->()
        CREATE (b)-[:direction_unknown {name:'$input', updated_time: dateTime()}]->(b)
    }
};

#alias {add_map_directional_feature_query {.*?} {.*}}
{
    #list {statments_for_neo4j} {add} 
    {
        MATCH (a:Player)-[:located_at]->(:Room)-[r:direction {name: '%1'}]->()
        SET r.map_feature = '%2'
    }
};

#alias {confirm_unconfirmed_exits {.*}}
{
    #variable input {%1};
    #replace {input} {'} {};
    #replace {input} {\\;} {};
    #variable {temp_listed_statement} 
    {
        MATCH (c:Player)-[located_at]->(a:Room) -[r:direction {unconfirmed: 'true'}]-> () 
        WHERE r.name in [$input]
        Remove r.unconfirmed 
        SET r.updated_time = dateTime()
    };
    #replace {temp_listed_statement} {¤} {'};
    #list {statments_for_neo4j} {add} {$temp_listed_statement};
};

#alias {mark_exits_temporary {.*}}
{
    #variable input {%1};
    #replace {input} {'} {};
    #variable {temp_listed_statement} 
    {
        MATCH (c:Player)-[located_at]->(a:Room) -[r:direction]-> () 
        WHERE NOT r.name in [$input]
        SET r.temporary = 'true', r.updated_time = dateTime()
    };
    #replace {temp_listed_statement} {¤} {'};
    #list {statments_for_neo4j} {add} {$temp_listed_statement};
};

#alias {reset_everything_neo4j_WARNING_CAREFULL}
{
    #list {statments_for_neo4j} {add} 
    {
        match (a) -[r] -> () delete a, r return r
    };
    #list {statments_for_neo4j} {add} 
    {
        match (a) delete a return a
    };
    #list {statments_for_neo4j} {add} 
    {
        CREATE (a:Player)-[:located_at]->(b:Room)
        RETURN b
    };
    listen_roomname_and_directions;
    look;
};

#alias {send_query}
{
    #variable {statements} {};
    #foreach {$statments_for_neo4j[]} {neo4j_statement}
    {
        #cat {statements} {"$neo4j_statement" };
    };
    #script {neo4j_response} {./send_query_to_neo4j.sh $statements};

    #foreach {$neo4j_response[]} {neo4j_response_part}
    {
        #if {"$neo4j_response_part" != "LostSoulNeo4j" && "$neo4j_response_part" != "SUCCESS"}
        {
            #showme {$neo4j_response_part : You can look at neo4j_response};
            #break;
        }
    };
    #variable {statments_for_neo4j} {};
};

#alias {summon_warbreaker_sword}
{
    will a shadow of Auldirfeng to appear in my grasp;
    will my starshadow blade to summon a protective aura;
};

#alias {start_aura}
{
    will my starshadow blade to summon a protective aura;
};

#alias {stop_aura}
{
    will my starshadow aura to dissipate;
};

#alias {trigger_show_attacks} 
{
    #variable listen_for_table_name {show_attacks_table};
    #variable listen_for_table_trigger_alias {show_attacks_alias};
    listen_for_table;
    show attacks;
};

#alias {show_attacks_alias} 
{
    #variable header_lines_count {4};
    #variable show_attacks_table_length {&show_attacks_table[]};
    #math show_attacks_table_length {$show_attacks_table_length - 1};
    
    #variable line_to_write_on {$bottom_bar_height};
    #math line_to_write_on {- $show_attacks_table_length + 1};
    #loop $header_lines_count $show_attacks_table_length line_number 
    {
        #variable {show_attacks_table_line_content} {$show_attacks_table[$line_number]};
        #regex {$show_attacks_table_line_content} {| {[^0-9]+?} {[0-9]+.*}} 
        {
            #format {text_formatted} {$right_bar_padding_configuration} {&1};
            #showme {$text_formatted} {$line_to_write_on} {$right_column_start_line};
            #math line_to_write_on {$line_to_write_on + 1};
        };
    };
};

#alias {listen_for_table}
{
    #gag {/---{.*?}---\\};
    #gag {| {.*?} |};
    #gag {>{[-]+}<};
    #gag {\\---{.*?}---/};

    #list {$listen_for_table_name} clear;
    #action {/---{.*?}---\\} 
    {
        #list {$listen_for_table_name} add {%%0};
    };
    #action {| {.*?} |} 
    {
        #list {$listen_for_table_name} add {%%0};
    };
    #action {>{[-]+}<} 
    {
        #list {$listen_for_table_name} add {%%0};
    };
    #action {\---{.*?}---/}
    {
        #list {$listen_for_table_name} add {%%0};
        #unaction {/---{.*?}---\\};
        #unaction {| {.*?} |};
        #unaction {>{[-]+}<};
        #unaction {\---{.*?}---/};
        #delay {0.1} {#ungag {/---{.*?}---\\};};
        #delay {0.1} {#ungag {| {.*?} |};};
        #delay {0.1} {#ungag {>{[-]+}<};};
        #delay {0.1} {#ungag {\\---{.*?}---/};};
        $listen_for_table_trigger_alias;
    };
};

#alias {teach_everything_from {.*}}
{
    #list ask_for_training clear; 
    #variable trainer_name {%1};
    say %1, what do you teach?;
    say %1, what will you teach me?;
    say %1, what can you teach?;
    say %1, what skills do you teach?;
    #action {{.*?} {states|says}, {--> |$ |"}I can provide instruction in {.*?}.{ <--| $|"} to you}
    {
        #variable all_skills {%%4};
        #list all_skills explode {, };
        #foreach {$all_skills[]} {next_skill}
        {
            #regex {$next_skill} {and {.*}} 
            {
                #list ask_for_training add {say $trainer_name, please teach me &1;}; 
                #showme {Second skill is &2 :: &1 :: &3};
                #variable second_skill &2;
                #replace second_skill {and } {};
                #list ask_for_training add {say $trainer_name, please teach me $second_skill;}; 
            }
            {
                #list ask_for_training add {say $trainer_name, please teach me $next_skill;}; 
            };
        };
        #unaction {{.*?} {states|says}, {--> |$ |"}I can provide instruction in {.*?}.{ <--| $|"} to you};
        setup_train_everything_ticker;
    };
}

#alias {train_everything_from {.*}}
{
    #list ask_for_training clear; 
    #variable trainer_name {%1};
    say %1, what skills do you train?;
    #action {{.*?} {states|says}, {--> |\\\| |"}I can provide instruction in {.*?}.{ <--| \|\/|"} to you}
    {
        #variable all_skills {%%4};
        #list all_skills explode {, };
        #foreach {$all_skills[]} {next_skill}
        {
            #regex {$next_skill} {and {.*}} 
            {
                #list ask_for_training add {say $trainer_name, train me in &1;}; 
                #showme {Second skill is &2 :: &1 :: &3};
                #variable second_skill &2;
                #replace second_skill {and } {};
                #list ask_for_training add {say $trainer_name, teach me $second_skill;}; 
            }
            {
                #list ask_for_training add {say $trainer_name, train me in $next_skill;}; 
            };
        };
        #unaction {{.*?} {states|says}, {--> |\\\| |"}I can provide instruction in {.*?}.{ <--| \|\/|"} to you};
        setup_train_everything_ticker;
    };
}

#alias {setup_train_everything_ticker}
{
    #list trained_skills clear;
    #ticker {train_everything_ticker} 
    {
        #list ask_for_training size {train_everything_size};
        #if {$train_everything_size > 0}
        {
            #list ask_for_training get 1 {next_skill};
            $next_skill;
            #list ask_for_training delete 1;
            #action {haggle for a bit}
            {
                #list trained_skills add {$next_skill};
            };
        };
        #else 
        {
            #showme {DONE TRAINING! Trained (call train_trained to train them again): $trained_skills[]};
            #unticker {train_everything_ticker};
        };
    } {2};
};

#highlight {Your starshadow blade glimmers with shadowy energy.} {orange};

#alias {train_trained}
{
    #variable ask_for_training {$trained_skills};
    setup_train_everything_ticker;
};

setup_all_paths;
#READ {ls_login.tin};
#split 0 $bottom_bar_height 0 0 1;
setup_logs;
#config {packet patch} 0.6;
listen_roomname_and_directions;
look;
